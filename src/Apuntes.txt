scripts

start : nos permite ejecutar nuestro proyecto

build : permite generar una vercion de nuestro proyecto para desplegar a producción  

eslintConfig : permite resivir recomedaciones en consola ejemplo algun metodo no se esta utilizando o importación 

robots : se utiliza para realizar web scrapting 

manifest : se utiliza para trabajar con progrest y web apps 


¿que es un componente?

Los Componentes son como fichas de lego con sus funcionalidades y caracteristicas.

    Tipos de Componentes: Contenedores y Componentes Presentacionales.

        * Los componentes contenedores: (Smart components)

        controlan interacciones con los usuarios, navegador, peticiones a APIs etc.

         Componentes Presentacionales: (Dumb Components)
         se encargan de la estructura y estilos de nuestras aplicacion 


         // Contenedor.js

            import React,  { useState, useEffect } from ‘react’;

            functionContenedor(props) {
                
                const [plant, setPlant] = useState(“”);

                useEffect(() => {
                    const fetchPlant = async () => {
                        const res = await fetch(props.api);
                        const plant = await res.json();
                        setPlant(plant.name);
                    };

                    fetchPlant();

                }, [props.api]);

                const Children = props.children;

                return<Childrenplan={plant} />;
            }

        export default Contenedor;


        ** Presentacional.js

        import React from ‘react’;

            const Presentacional = (props) => (
                <divclassName=”plantContainer”>
                <h2className=”plantTitle”>{props.plant}h2>
                div>
            );

        exportdefault Presentacional;

    ¿Que es un elemento? 
        es la unidad más básica con la que se construye la interfaz de usuario. Es un objeto plano que representa lo que desea ver en la pantalla.



Comunicacion de componentes por medio de props 

la comunicacion entre componentes se realiza principalmete mediante porps (propiedades). Las props permiten que un padre pase datos y funciones a sus componentes hijos. 

comunicacion de padre a hijo: El componente padre pasa datos al hijo mediante props.

comunicacion de hijo a padre: El componente hijo llama a funciones pasadas como props para comunicar eventos o datos de vuelta al padre.






Local Storage 

- Caracteristica del navegador web que permite almacenar datos de manera persistente en el navegador del usuario.
- Almacena informacion que no se envia al servidor con cada solicitud HTTP.

    caracteristicas Principales 

        1.- Persistencia: Los datos almacenados pemanecen incluso despues de cerrar el navegador. Solo se borran si se elimina explicitamente o si se borra la cache del navegador.

        2.- Capacidad: Puede almacenar hasta unos 5 mb de datos por origen (dominio)

        3.- Almacenamiento en Clave-Valor: las claves como los valores son strings

    Funcionalidades Basicas 

        Guardar Datos:
            metodo => localStorage.setItem('nombre','Juan');
                nombre = clave 
                juan = valor que se desea guardar 

        Recuperar Datos
            metodo 
                const nombre = localStorage.getItem('nombre');
                console.log(nombre) // imprime 'Juan'

        Elimianr Datos:
            metodo => localStorage.removeItem('nombre');

Usos comunes de localStorage

    * mantener sesiones de Usuario: Almacenar informacion basica sobre el usuario, como nombre o preferencias

    * Guardar preferencias: Guardar configuraciones de la aplicacion que usuario haya personalizado 

    * Almacenamiento de Datos Temporales: gurdar datos que deben persistir entre recargas de pagina pero que no son criticos 

Conclusión
El Local Storage es una herramienta útil para almacenar datos en el navegador de manera persistente y sencilla, permitiendo que las aplicaciones web recuerden información entre sesiones.


En localStorage solo puede almacenar strings por lo cual para poder mandar un objeto,array,etc de JS al localStorage se utiliza los siguietes metodos de JSON: 

JSON:
    el obejo JSON en JavaScript  tiene dos métodos principales: JSON.stringify y JSON.parse. 

    JSON.stringify();
        este metodo convierte un valor de JS en una cadena JSON. Permite trasformar  objetos array, numeros, string, booleanos, y null en su representacion JSON

        Sintaxis:

            JSON.stringify(value, replacer, space);

                value: El valor que se va a convertir en una cadena JSON.
                replacer (opcional): Una función o un array que puede alterar el proceso de conversión.
                space (opcional): Un número o cadena que se usa para agregar espacios en blanco y hacer que la salida sea más legible.

        ejemplo:

            const obj = { name: 'Alice', age: 25 };
            const jsonString = JSON.stringify(obj);
            console.log(jsonString); // {"name":"Alice","age":25}

        JSON.stringify(parametro) => metodo utilizado para transformar un obejo de js a string para poder almacenarlo en el localStorage

    
    
    JSON.parse
        este metodo analiza una cadena JSON y la convierte en un objeto de JS. 

        Sintaxis:

            JSON.parse(text, reviver);

                text: La cadena JSON que se va a analizar.
                reviver (opcional): Una función que puede transformar los resultados antes de que se devuelvan.

        Ejemplo básico:

            const jsonString = '{"name":"Alice","age":25}';
            const obj = JSON.parse(jsonString);
            console.log(obj); // { name: 'Alice', age: 25 }

        Ejemplo con reviver:

            const jsonString = '{"name":"Alice","age":25}';
            const obj = JSON.parse(jsonString, (key, value) => {
                
                if (key === 'age') {
                    return value + 1; // Incrementa la edad en 1
                }

                return value;
            });
            
            console.log(obj); // { name: 'Alice', age: 26 }

        JSON.parse(parametro) => metodo para convertir un string del localStorage a objeto de js 




Custom Hooks

    Son una forma de reutilizar la logica del estado entre componente. Son funciones de JS

¿que es un Hook?
    es una funcion especial que te permite engancharte a las caractericticas de React, como el estado y el ciclo de vida. Los dos Hooks mas comunes son: 

        - useState : para manejar el estado en un componente funcional.
        - useEffect: para realizar efectos secundarios, como llamadas a APIs o suscripciones.

¿Que es un Custom Hook?

    es simplemente una funcion de JavaScript cuyo nombre comienza con use y que puede llamar a otros Hooks. Te permite extraer lógica de componentes y reutilizarla.

    siempre deben retornar objeto, array o la estructura con la que se desee trabajar



Organizacion de archivos y carpetas

Una carpeta por cada parte importante de nuestra aplicacion (componente ) 
esta carpeta debe guardar todo lo relacionado con el componente:
            - codigo React 
            - codigo JS 
            - CSS 
            - imagenes
            - svg, etc.

a la hora de realizar las importaciones la mejor practica es sin especificar

    Sin especificar     
        import { CreateTodoButton } from './CreateTodoButton';
    
    Especificado 
        import { CreateTodoButton } from './CreateTodoButton/index.js';


¿Que son los efectos?



React Portals

    permiten renderizar un componente de React en un lugar diferente del DOM al de su componente padre. Esto es util cuando necesitas que un elemento aparezca en una posicion especifica en la pagina, como un modal(ventana emergente), pero el codigo que lo genera esta en otra parte de tu aplicacion.


    Cuando usar React Portals

        - Modales (ventanas emergentes): Para mostrar contenido superpuesto que necesita esta encima de otros elementos 

        - Tooltips: Para mostrar pequeñas ventanas de informacion sobre otros elementos.

        - Notificaciones: Para mostrar mensajes o alertas en un lugar especifico de la pantalla 


    los portals son una herramienta poderosa en React que te permite controlar con precision donde se renderizan tus componentes en el DOM, mietras mantines una estructura logica clara en ru codigo de React.
    
    
